0x400608: ret
0x400610: repz ret
0x400576: leave; ret
0x400512: pop rbp; ret
0x400575: dec ecx; ret
0x40060f: add bl,dh; ret
0x400414: add esp,0x8; ret
0x400413: add rsp,0x8; ret
0x400605: add esp,0x38; ret
0x400604: add rsp,0x38; ret
0x4005dc: fmul [rax-0x7d]; ret
0x400511: pop rbx; pop rbp; ret
0x400510: or [rbx+0x5d],bl; ret
0x40053e: jmp rax; pop rbp; ret
0x40060e: add [rax],al; repz ret
0x400572: mov edx,0xc9fffffe; ret
0x400609: nop [rax+0x0]; repz ret
0x40049c: call rax; add rsp,0x8; ret
0x40060d: add [rax],al; add bl,dh; ret
0x400411: add [rax],al; add rsp,0x8; ret
0x400602: and al,0x30; add rsp,0x38; ret
0x40050e: add esp,0x8; pop rbx; pop rbp; ret
0x40050d: add rsp,0x8; pop rbx; pop rbp; ret
0x400570: add al,ch; mov edx,0xc9fffffe; ret
0x400607: cmp bl,al; nop [rax+0x0]; repz ret
0x40040f: or eax,0x48000002; add esp,0x8; ret
0x400571: call 0x400430 <read@plt>; leave; ret
0x40060c: add [rax],al; add [rax],al; repz ret
0x400600: mov edi,[rsp+0x30]; add rsp,0x38; ret
0x4005ff: mov r15,[rsp+0x30]; add rsp,0x38; ret
0x40060b: add [rax],0x0; add [rax],al; repz ret
0x400539: mov edi,0x600e48; jmp rax; pop rbp; ret
0x40064e: int1; add rsp,0x8; pop rbx; pop rbp; ret
0x40053f: loopne 0x40059e <__libc_csu_init+30>; ret
0x400499: shl [rdx+rax*1-0x1],0xd0; add rsp,0x8; ret
0x40040d: add al,ch; or eax,0x48000002; add esp,0x8; ret
0x40050b: add [rcx],al; add rsp,0x8; pop rbx; pop rbp; ret
0x400538: pop rbp; mov edi,0x600e48; jmp rax; pop rbp; ret
0x40056e: add [rax],al; add al,ch; mov edx,0xc9fffffe; ret
0x40056c: mov eax,0x0; call 0x400430 <read@plt>; leave; ret
0x40056f: add [rax],al; call 0x400430 <read@plt>; leave; ret
0x4005fd: and al,0x28; mov r15,[rsp+0x30]; add rsp,0x38; ret
0x40064c: push [rbp-0xf]; add rsp,0x8; pop rbx; pop rbp; ret
0x40053d: add bh,bh; loopne 0x40059e <__libc_csu_init+30>; ret
0x40056b: add [rax+0x0],bh; call 0x400430 <read@plt>; leave; ret
0x40040e: call 0x400620 <__do_global_ctors_aux>; add rsp,0x8; ret
0x4005fe: sub [rbx+rcx*4+0x7c],cl; and al,0x30; add rsp,0x38; ret
0x40064b: clc; push [rbp-0xf]; add rsp,0x8; pop rbx; pop rbp; ret
0x40065c: call 0x4004b0 <__do_global_dtors_aux>; add rsp,0x8; ret
0x4005fb: mov esi,[rsp+0x28]; mov r15,[rsp+0x30]; add rsp,0x38; ret
0x4005fa: mov r14,[rsp+0x28]; mov r15,[rsp+0x30]; add rsp,0x38; ret
0x40049a: je 0x40049e <call_gmon_start+18>; call rax; add rsp,0x8; ret
0x40040b: add [rax],eax; add al,ch; or eax,0x48000002; add esp,0x8; ret
0x400496: add [rax-0x7b],cl; shl [rdx+rax*1-0x1],0xd0; add rsp,0x8; ret
0x400509: or esp,[rax]; add [rcx],al; add rsp,0x8; pop rbx; pop rbp; ret
0x400567: mov edi,0x0; mov eax,0x0; call 0x400430 <read@plt>; leave; ret
0x40056a: add [rax],al; mov eax,0x0; call 0x400430 <read@plt>; leave; ret
0x40056d: add [rax],al; add [rax],al; call 0x400430 <read@plt>; leave; ret
0x400569: add [rax],al; add [rax+0x0],bh; call 0x400430 <read@plt>; leave; ret
0x400659: sub esp,0x8; call 0x4004b0 <__do_global_dtors_aux>; add rsp,0x8; ret
0x400658: sub rsp,0x8; call 0x4004b0 <__do_global_dtors_aux>; add rsp,0x8; ret
0x40040c: add [rax],al; call 0x400620 <__do_global_ctors_aux>; add rsp,0x8; ret
0x4005f8: and al,0x20; mov r14,[rsp+0x28]; mov r15,[rsp+0x30]; add rsp,0x38; ret
0x400657: nop; sub rsp,0x8; call 0x4004b0 <__do_global_dtors_aux>; add rsp,0x8; ret
0x400498: test eax,eax; je 0x40049e <call_gmon_start+18>; call rax; add rsp,0x8; ret
0x400497: test rax,rax; je 0x40049e <call_gmon_start+18>; call rax; add rsp,0x8; ret
0x400493: or rsp,[r8]; add [rax-0x7b],cl; shl [rdx+rax*1-0x1],0xd0; add rsp,0x8; ret
0x400494: or esp,[rax]; add [rax-0x7b],cl; shl [rdx+rax*1-0x1],0xd0; add rsp,0x8; ret
0x400565: mov esi,eax; mov edi,0x0; mov eax,0x0; call 0x400430 <read@plt>; leave; ret
0x400564: mov rsi,rax; mov edi,0x0; mov eax,0x0; call 0x400430 <read@plt>; leave; ret
0x4005f9: and [rbx+rcx*4+0x74],cl; and al,0x28; mov r15,[rsp+0x30]; add rsp,0x38; ret
0x40064d: jne 0x400640 <__do_global_ctors_aux+32>; add rsp,0x8; pop rbx; pop rbp; ret
0x400568: add [rax],al; add [rax],al; mov eax,0x0; call 0x400430 <read@plt>; leave; ret
0x4005f6: mov ebp,[rsp+0x20]; mov r14,[rsp+0x28]; mov r15,[rsp+0x30]; add rsp,0x38; ret
0x4005f5: mov r13,[rsp+0x20]; mov r14,[rsp+0x28]; mov r15,[rsp+0x30]; add rsp,0x38; ret
0x400536: je 0x400540 <frame_dummy+32>; pop rbp; mov edi,0x600e48; jmp rax; pop rbp; ret
0x400656: nop; nop; sub rsp,0x8; call 0x4004b0 <__do_global_dtors_aux>; add rsp,0x8; ret
0x400506: mov [rip+0x200b1b],0x1 # 0x601028 <completed>; add rsp,0x8; pop rbx; pop rbp; ret
0x40040a: adc al,[rcx]; add [rax],al; call 0x400620 <__do_global_ctors_aux>; add rsp,0x8; ret
0x400409: call 0x400520 <frame_dummy>; call 0x400620 <__do_global_ctors_aux>; add rsp,0x8; ret
0x4005f7: ins es:[rdi],dx; and al,0x20; mov r14,[rsp+0x28]; mov r15,[rsp+0x30]; add rsp,0x38; ret
0x400495: and [rax],al; test rax,rax; je 0x40049e <call_gmon_start+18>; call rax; add rsp,0x8; ret
0x4005f3: and al,0x18; mov r13,[rsp+0x20]; mov r14,[rsp+0x28]; mov r15,[rsp+0x30]; add rsp,0x38; ret
0x400492: add eax,0x200b49; test rax,rax; je 0x40049e <call_gmon_start+18>; call rax; add rsp,0x8; ret
0x4005f2: fs and al,0x18; mov r13,[rsp+0x20]; mov r14,[rsp+0x28]; mov r15,[rsp+0x30]; add rsp,0x38; ret
0x400408: add al,ch; adc al,[rcx]; add [rax],al; call 0x400620 <__do_global_ctors_aux>; add rsp,0x8; ret
0x4005fc: je 0x400622 <__do_global_ctors_aux+2>; sub [rbx+rcx*4+0x7c],cl; and al,0x30; add rsp,0x38; ret
0x4005f4: sbb [rbx+rcx*4+0x6c],cl; and al,0x20; mov r14,[rsp+0x28]; mov r15,[rsp+0x30]; add rsp,0x38; ret
0x40064a: cmp eax,0xffffffff; jne 0x400640 <__do_global_ctors_aux+32>; add rsp,0x8; pop rbx; pop rbp; ret
0x4005f1: mov esp,[rsp+0x18]; mov r13,[rsp+0x20]; mov r14,[rsp+0x28]; mov r15,[rsp+0x30]; add rsp,0x38; ret
0x400407: add [rax],al; call 0x400520 <frame_dummy>; call 0x400620 <__do_global_ctors_aux>; add rsp,0x8; ret
0x400503: fdiv [rdx-0x1e]; mov [rip+0x200b1b],0x1 # 0x601028 <completed>; add rsp,0x8; pop rbx; pop rbp; ret
0x400649: cmp rax,0xffffffffffffffff; jne 0x400640 <__do_global_ctors_aux+32>; add rsp,0x8; pop rbx; pop rbp; ret
0x400491: mov eax,[rip+0x200b49] # 0x600fe0; test rax,rax; je 0x40049e <call_gmon_start+18>; call rax; add rsp,0x8; ret
0x400490: mov rax,[rip+0x200b49] # 0x600fe0; test rax,rax; je 0x40049e <call_gmon_start+18>; call rax; add rsp,0x8; ret
0x400404: call 0x40048c <call_gmon_start>; call 0x400520 <frame_dummy>; call 0x400620 <__do_global_ctors_aux>; add rsp,0x8; ret
0x400504: jb 0x4004e8 <__do_global_dtors_aux+56>; mov [rip+0x200b1b],0x1 # 0x601028 <completed>; add rsp,0x8; pop rbx; pop rbp; ret
0x400401: sub esp,0x8; call 0x40048c <call_gmon_start>; call 0x400520 <frame_dummy>; call 0x400620 <__do_global_ctors_aux>; add rsp,0x8; ret
0x400400: sub rsp,0x8; call 0x40048c <call_gmon_start>; call 0x400520 <frame_dummy>; call 0x400620 <__do_global_ctors_aux>; add rsp,0x8; ret
